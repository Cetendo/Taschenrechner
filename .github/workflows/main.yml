# This is a basic workflow to help you get started with Actions

name: CREATE JAR

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**/README.md'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '19'
          distribution: 'adopt'
          
      # Runs a set of commands using the runners shell
      - name: Create the Jar
        run: |
          javac *.java cc/redberry/libdivide4j/*.java
          jar -cfe Rechner.jar Rechner *.class */*/*/*.class
          
      - uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          #repo: <owner>/<repoName> # defaults to current repo
          keep_latest: 0
          #delete_tag: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: Rechner.jar
          release_name: Release Rechner.jar
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./Rechner.jar
          asset_name: Rechner.jar
          asset_content_type: application/jar
